<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>General on BennuGD</title><link>https://divhub.github.io/bennugd-website/categories/general/</link><description>Recent content in General on BennuGD</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://divhub.github.io/bennugd-website/categories/general/index.xml" rel="self" type="application/rss+xml"/><item><title>Bit Flags</title><link>https://divhub.github.io/bennugd-website/docs/language/bit_flags/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/bennugd-website/docs/language/bit_flags/</guid><description>Bit flags are constants which each denotes a single unique case in one situation and can be combined to form different, unique cases.
They are called bit flags, because when bits are used to denote a cases, we observe they are indeed single and unique and can be combined to form different unique combinations.
Bit flags are often used as integers:
Bit pattern Integer Value 0001 1 0010 2 0100 4 1000 8 These can be combined to form, for example:</description></item><item><title>Data Types</title><link>https://divhub.github.io/bennugd-website/docs/language/datatypes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/bennugd-website/docs/language/datatypes/</guid><description> Description Datatypes give meaning to data and dictate how a variable acts and reacts. Examples of datatypes are ints, floats and strings. Special cases are voids, arrays, varspaces and structs. User made types can also be defined, by use of the operator Type.
List of Types Array Byte Float Int Pointer Short Sizeof String Struct Varspace Void Word</description></item><item><title>Hello World</title><link>https://divhub.github.io/bennugd-website/docs/general/hello-world/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/bennugd-website/docs/general/hello-world/</guid><description>The Bennu Hello World! Example.
import &amp;quot;mod_say&amp;quot; // import the module to output text to console, using say() Process Main() // start the definition of the main process Begin // start the code say(&amp;quot;Hello World!&amp;quot;); End // end the definition of the main process This will import the module mod_say which contains the definition of the say() function. The function will echo the argument &amp;ldquo;Hello World&amp;rdquo; to the screen.</description></item><item><title>Installation</title><link>https://divhub.github.io/bennugd-website/docs/general/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/bennugd-website/docs/general/installation/</guid><description>Polydore defenderet hominis et ortu formaene. Chromis puer ambagibus avis nitentem Themin intremuit Ixionides aequora voveam partes rectum et tempora virus. Attulerat subito, sit petatur tumulum vinaque cuncta: totum quoque pugnat ministrat rudente iura. Parens bisque?
Et dote digna, sceleris Cephenum novae Caeneus nec laevo Latia, tamen. Quae stamina visu rogum revellere tales. Ibat Tempus furor tellus, qui posita Phoebi, est somno hoc, senectus sonum attollens esset ex leves. Aspergine iactantur et fuit, ut clarus Scylla; semper rubefecit caelicolae!</description></item><item><title>Keywords</title><link>https://divhub.github.io/bennugd-website/docs/language/keywords/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/bennugd-website/docs/language/keywords/</guid><description> Keywords are reserved words for a special purpose.
For example the word function is reserved to declare a function, and cannot be used for any other purpose.
Example The following declarations will be invalid:
Invalid Example 1 Function Function( ) Begin return; End Invalid Example 2 int function; float debug;</description></item><item><title>Pointer</title><link>https://divhub.github.io/bennugd-website/docs/language/pointer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/bennugd-website/docs/language/pointer/</guid><description>Syntax Declaration of a pointer:
&amp;lt;datatype&amp;gt; POINTER &amp;lt;pointername&amp;gt; &amp;lt;datatype&amp;gt; * &amp;lt;pointername&amp;gt; Assignment of a value to the location pointed to:
POINTER &amp;lt;pointername&amp;gt; = &amp;lt;value&amp;gt;; * &amp;lt;pointername&amp;gt; = &amp;lt;value&amp;gt;; Notation Description &amp;lt; ... &amp;gt; item [ ... ] optional ( ... )* 0 or more times ( ... )+ 1 or more times Description Pointers, are used to point to a location in memory.</description></item><item><title>Ports</title><link>https://divhub.github.io/bennugd-website/docs/general/ports/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/bennugd-website/docs/general/ports/</guid><description>To make a simple port of Bennu and the modules, all is needed is the source, SDL, SDL_mixer, autoconf and make. With those, it can be compiled to virtually any platform.
Current official ports: Windows Linux GP2X Wiz Caanoo Current unofficial ports: Nintendo Wii MacOS X (Intel Only) Haiku OS Open Pandora Playstation Portable Apple iOS (iPhone) Motorola Z6/EM30/E8/EM35/VE66 Ports being worked on: Android Dingoo Dingux Dreamcast Xbox Playstation 2 HTML 5 Bennu .</description></item><item><title>Process</title><link>https://divhub.github.io/bennugd-website/docs/language/process/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/bennugd-website/docs/language/process/</guid><description>Syntax Process &amp;lt;name&amp;gt; ( [ &amp;lt;parameters&amp;gt; ] ) [ Public [ &amp;lt;public variables&amp;gt; ] ] [ Private [ &amp;lt;private variables&amp;gt; ] ] Begin [ &amp;lt;main code&amp;gt; ] [OnExit [ &amp;lt;OnExit code&amp;gt; ] ] End Notation Description &amp;lt; ... &amp;gt; item [ ... ] optional ( ... )* 0 or more times ( ... )+ 1 or more times Description process is a reserved word used to start the code of a process.</description></item><item><title>Text</title><link>https://divhub.github.io/bennugd-website/docs/language/text/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/bennugd-website/docs/language/text/</guid><description>A text is a text written on screen with texts functions, like write() or write_int(). A text is addressed using the associated TextID.
There are two kinds of texts:
Static text is any text written with write(); it is static, because the content of the text cannot be changed after writing, but the text can be moved and deleted.
Dynamic text is any text written with write_xxx() functions; it is dynamic because the content of the text always reflects the current value of the variable specified.</description></item><item><title>TextID</title><link>https://divhub.github.io/bennugd-website/docs/language/textid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/bennugd-website/docs/language/textid/</guid><description>TextID is an identifier associated with a certain text. It is returned by various text functions, like write(), write_int(), write_string(), write_float() and move_text().
When a dynamic text is created, it has the color last set by set_text_color(). By default this is white (rgb(255,255,255)). Its Z value is equal to text_z at the moment of creation, which is -256 by default.
To move the dynamic text associated with a TextID, use move_text().</description></item></channel></rss>